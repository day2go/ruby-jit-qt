
解释执行时加载第三方的动态库，这个参数没有找到说明，但能用。
lli -load=./libfoo.so main.bc


qtbindings中如何实现的Qt GUI主线程与ruby主线的融合？
(错误：qtbindings中提供的Qt::CoreApplication和Qt::Application都是假的，
并不是执行的Qt的QCoreApplication或者QApplication类。)
它也是直接执行的Qt Application exec方法，但它做了个补丁，是RubyThreadFix，
这个类使用了QTimer，执行ruby主进程中的sleep()，让ruby主进程有一个获取并处理事件的机会。
实际上，ruby主线程的控制权已经转移到了QApplication::exec()的事件循环中了。

也许本项目也需要使用这种类似的机制。
还有没有其它的方式呢，这就需要研究下ruby的事件机制和QApplication::exec()的事件机制了，
看怎么能整合在一起。
可以考虑完全让ruby不接收任何信号，全部透明传递给Qt，像Ctrl+C这种信号。

执行流程：
qtruby4.rb -> Qt.cpp:method_missing() -> QtRuby::MethodCall:next()

gem目录结构：
/home/gzleo/.gem/ruby/2.1.0
├── bin
│   ├── rbqtapi
│   ├── rbrcc
│   ├── rbuic4
│   ├── smokeapi
│   └── smokedeptool
├── build_info
├── cache
│   └── qtbindings-4.8.6.0.gem
├── doc
│   ├── extensions
│   └── qtbindings-4.8.6.0
├── extensions
│   └── x86-linux
├── gems
│   └── qtbindings-4.8.6.0
└── specifications
    └── qtbindings-4.8.6.0.gemspec
